{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","buyTokens","numberOfTokens","setState","loading","state","tokenSale","methods","buyToken","send","from","account","value","xTokenPrice","gas","tokenSaleAccount","xToken","tokenSaleBalance","xTokenSold","xTokensAvailable","a","this","loadWeb3","loadBlockChainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","tokenSaleData","XTokenSale","networks","Contract","abi","address","tokenPrice","call","toString","tokensSold","console","log","xTokenData","XToken","totalSupply","balanceOf","userBalance","percentage","className","onSubmit","event","preventDefault","utils","toWei","id","type","ref","input","placeholder","ProgressBar","now","label","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fe10e44.chunk.js","sourcesContent":["import './App.css';\r\nimport { ProgressBar, Button } from '../node_modules/react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, {Component} from 'react';\r\nimport Web3 from 'web3';\r\nimport XToken from './src/build/contracts/xToken.json'\r\nimport XTokenSale from './src/build/contracts/tokenSale.json'\r\n\r\nclass App extends Component {\r\n  async componentWillMount() {\r\n      await this.loadWeb3()\r\n      await this.loadBlockChainData()\r\n    }\r\n  async loadWeb3() {\r\n      if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum)\r\n        await window.ethereum.enable()\r\n    }\r\n      else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n      else{\r\n        window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n}\r\nasync loadBlockChainData(){\r\n  const web3 = window.web3\r\n  //load accounts\r\n  const accounts = await web3.eth.getAccounts()\r\n  this.setState({account: accounts[0]})\r\n  //Get Network ID\r\n  const networkId = await web3.eth.net.getId()\r\n\r\n  //Load TokenSale SmartContract\r\n  const tokenSaleData = XTokenSale.networks[networkId]\r\n  if(tokenSaleData){\r\n      const tokenSale = new web3.eth.Contract(XTokenSale.abi, tokenSaleData.address)\r\n      this.setState({tokenSale: tokenSale})\r\n      let xTokenPrice = await tokenSale.methods.tokenPrice().call()\r\n      this.setState({xTokenPrice: xTokenPrice.toString()})\r\n      let xTokenSold = await tokenSale.methods.tokensSold().call()\r\n      this.setState({xTokenSold:xTokenSold.toString()})\r\n\r\n      const tokenSaleAccount = tokenSaleData.address\r\n      this.setState({tokenSaleAccount:tokenSaleAccount})\r\n\r\n      console.log(tokenSaleData.address)\r\n  } else{\r\n      window.alert('contract was not deployed to test network.')\r\n  }\r\n\r\n    //load xToken smart contract\r\n    const xTokenData = XToken.networks[networkId]\r\n    if(xTokenData){\r\n     const xToken = new web3.eth.Contract(XToken.abi, xTokenData.address)\r\n      this.setState({xToken: xToken})\r\n      let xTokensAvailable = await xToken.methods.totalSupply().call()\r\n      this.setState({xTokensAvailable: xTokensAvailable})\r\n      let userBalance = await xToken.methods.balanceOf(accounts[0]).call()\r\n      this.setState({userBalance: userBalance})\r\n      console.log(userBalance)\r\n  } else{\r\n   window.alert('contract was not deployed to test network.')\r\n  }\r\nthis.setState({loading:false})\r\n}\r\n\r\nbuyTokens = (numberOfTokens) =>{\r\n  this.setState({loading: true})\r\n  this.state.tokenSale.methods.buyToken(numberOfTokens).send({\r\n    from:this.state.account,\r\n    value: this.state.xTokenPrice * numberOfTokens,\r\n    gas: 50000})\r\n}\r\nconstructor(props) {\r\n  super(props)\r\n  this.state = {\r\n    account: '',\r\n    tokenSaleAccount:'',\r\n    tokenSale: {},\r\n    xToken:null,\r\n    xTokenPrice:0,\r\n    tokenSaleBalance:0,\r\n    xTokenSold:0,\r\n    xTokensAvailable:0,\r\n    loading: true\r\n  }\r\n}\r\n\r\n  render(){\r\n    let content\r\n   if(this.state.loading){\r\n     content = <p id= \"loader\" className = \"text-center\">Loading...</p>\r\n   }\r\n\r\n  const percentage = (this.state.xTokenSold / this.state.xTokensAvailable) * 100\r\n    return(\r\n      <div>\r\n      <br></br>\r\n        <blockquote className=\"blockquote text-center\">\r\n          <h1 className=\"mb-0\"> <strong>XTOKEN ICO SALE</strong></h1>\r\n            <footer className=\"blockquote-footer\">Huncho J</footer>\r\n      </blockquote>\r\n      <div className=\"col-lg-12 d-flex justify-content-center\">\r\n        <form  onSubmit={(event) => {\r\n          event.preventDefault()\r\n          let numberOfTokens\r\n          numberOfTokens = this.numberOfTokens.value.toString()\r\n          numberOfTokens = window.web3.utils.toWei(numberOfTokens, 'Ether')\r\n          this.buyTokens(numberOfTokens)\r\n      }}>\r\n     <p  className= \"text-center\">XToken price is {this.state.xTokenPrice} ether</p>\r\n        <input className=\"form-control\"\r\n          id=\"numberOfTokens\"\r\n          type='number'\r\n          ref={(input) => {this.numberOfTokens = input }}\r\n          placeholder=\"1\"\r\n     />\r\n      <button type=\"submit\" className=\"btn btn-primary btn-block\"> Buy XToken</button>\r\n  <br></br>\r\n  <div className=\"progressBar\">\r\n   <ProgressBar now={percentage} label={`${percentage}% completed`} />\r\n  </div>\r\n     </form>\r\n  </div>\r\n  <div className=\"container\">\r\n   <p><span className=\"tokens-sold\"></span>{this.state.xTokenSold}/{this.state.xTokensAvailable} <span className= \"tokens-available\"></span> tokens sold</p>\r\n   <p className= \"text-muted\"> Your Account Balance: {this.state.userBalance}</p>\r\n    <p className= \"text-muted\" id=\"account\">Your account address: {this.state.account}</p>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}